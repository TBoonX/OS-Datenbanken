Key-/Value
---------------
Daten werden gruppiert und sind optional mit Schema versehen
Zugriff über Schlüssen (eventuell mehrere Versionen)
schnell, da nur Schlüssel eindeutig sein muss und Zugriiff des (hash) keys performant
Redis, Chordless, Riak, MEMBASE, Tyrant, Voldemort
keine einheitliche und komplexe Abfragesprache




Document
---------------
einzig Dokumente - tupel, tabelle, collections
innerhalb von Dokumenten sind felder aus key/value
values sind strukturiert und versioniert
ausgabe und speicherung in JSON, XML oder YAML
meist ohne Join
vertreter: MongoDB, CouchDB, Amazon SimpleDB, IBM Lotus Notes, Terrastore, ThruDB, OrientDB, RavenDB
(XML-Datenbanken zählen dazu)
Ziel: unstrukturierte Daten speichern, Zugriff ermöglichen und Skalierbarkeit



Column-orientated
----------------
Attribute werden je in einer eigenen Tabelle hintereinander abgelegt (pro Zeit ein eigener Eintrag) - eig. objekt mit name, attribute und Zeitstempel
beispiel: Speicherung relational: 1, Alex, 32, 2, Jessy, 55, 3, Josh, 12
		  Speicherung spaltenorientiert: 1,2,3,Alex,Jessy,Josh,32,55,12
		  
Sybase IQ, FluidDB, C-Store und MonetDB
		  
Nachteile:
	aufwendiges suchen und einfügen sowie schrieben und lesen von objektstrukturen(zusammenhängenden Spaltendaten)
Vertica
Vorteile:
	Spalteneinfügungen sind kostengünstig
	Garbage collection effektiv
	Datenanalyse, Datenkompression und Caching
	OLAP und Data warehouse
	
Cassandra und Projekt Voldemort: consistence hashing
amazon simple db
wide-column / BigTable: HBase, Cassandra, Hypertable;
	Schlüssel zeigt auf mehrere Tupel bzw. versionen; -> alter werden automatisch gelöscht
	Tabellen werden in tablets unterteilt (wonach tabelle automatisch bei bestimmter Größe aufteteilt wird)
	...

-> BigTable: 
	Zugriff über row, column und time
	
-> Cassandra, Amazon SImpleDB und HBase:
	mehrdimensionale Tabellen
	Format: n*[Domain / Keyspace] x [item / Column Family] x [Key x] n*[key+Value]
	




Graphendatenbanken
----------------
Knoten=Objekte
Kanten=Beziehungen
graphenoptimales Format
mit optionalem Schema
Kanten können typisiert sein
keine einheitliche Abfragesprache
teilweise ACID
geeignet semantische Beziehungen zwischen Objekten darzustellen -> semantic web